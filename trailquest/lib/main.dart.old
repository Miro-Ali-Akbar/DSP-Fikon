import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_routes/google_maps_routes.dart';

void main() => runApp(const MyApp());

/// Determine the current position of the device.
///
/// When the location services are not enabled or permissions
/// are denied the `Future` will return an error.
Future<Position> _determinePosition() async {
  bool serviceEnabled;
  LocationPermission permission;

  // Test if location services are enabled.
  serviceEnabled = await Geolocator.isLocationServiceEnabled();
  if (!serviceEnabled) {
    // Location services are not enabled don't continue
    // accessing the position and request users of the
    // App to enable the location services.
    return Future.error('Location services are disabled.');
  }

  permission = await Geolocator.checkPermission();
  if (permission == LocationPermission.denied) {
    permission = await Geolocator.requestPermission();
    if (permission == LocationPermission.denied) {
      // Permissions are denied, next time you could try
      // requesting permissions again (this is also where
      // Android's shouldShowRequestPermissionRationale
      // returned true. According to Android guidelines
      // your App should show an explanatory UI now.
      return Future.error('Location permissions are denied');
    }
  }

  if (permission == LocationPermission.deniedForever) {
    // Permissions are denied forever, handle appropriately.
    return Future.error(
        'Location permissions are permanently denied, we cannot request permissions.');
  }

  // When we reach here, permissions are granted and we can
  // continue accessing the position of the device.
  return await Geolocator.getCurrentPosition();
}

class MyApp extends StatefulWidget {
  const MyApp({super.key});

  @override
  State<MyApp> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  late GoogleMapController mapController;

  Position? pos;

  final LatLng _center = const LatLng(0, 0);

  /// LatLng is included in google_maps_flutter
  List<LatLng> points = [
    LatLng(59.84429621673012, 17.638228177426775),
    LatLng(59.84643220507929, 17.63963225848925),
    LatLng(59.85009456157953, 17.643307828593034),
    LatLng(59.85444306179348, 17.63943133739685),
  ];

  MapsRoutes route = new MapsRoutes();
  DistanceCalculator distanceCalculator = new DistanceCalculator();
  String googleApiKey = 'YOUR KEY HERE';
  String totalDistance = 'No route';

  @override
  void initState() {
    super.initState();
    _determinePosition().then((value) {
      setState(() {
        pos = value;
      });
    });
  }

  void _onMapCreated(GoogleMapController controller) {
    mapController = controller;
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        useMaterial3: true,
        colorSchemeSeed: Colors.green[700],
      ),
      home: Scaffold(
        appBar: AppBar(
          title: const Text('TrailQuest'),
          elevation: 2,
        ),
        body: pos == null
            ? const Center(child: CircularProgressIndicator())
            : GoogleMap(
                onMapCreated: _onMapCreated,
                polylines: route.routes,
                initialCameraPosition: CameraPosition(
                  target: LatLng(pos!.latitude, pos!.longitude),
                  zoom: 15.0,
                ),
                markers: {
                  Marker(
                    markerId: const MarkerId("Hem"),
                    position: LatLng(pos!.latitude, pos!.longitude),
                  ),
                },
              ),
        floatingActionButton: Align(
          alignment: Alignment.bottomCenter,
          child: FloatingActionButton(
            onPressed: () async {
              await route.drawRoute(points, 'Test routes',
                  Color.fromRGBO(130, 78, 210, 1.0), googleApiKey,
                  travelMode: TravelModes.walking);
              setState(() {
                totalDistance = distanceCalculator
                    .calculateRouteDistance(points, decimals: 1);
              });
            },
          ),
        ),
      ),
    );
  }
}
